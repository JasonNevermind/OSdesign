缓冲池结构体    buffpool
空闲队列    empq
输入队列    inq
输出队列    outq

Get_buf(封装Take_buf)：从缓冲队列取出一个缓冲区的过程
Put_buf(封装Add_buf)：从缓冲区插入对应缓冲队列的过程
void put_buf(int type, int work_buf)
{
	Wait(MS(type));			 //MS是用来互斥的信号量，保证缓冲队列的同一缓冲区只能被一个线程操作。
	add_buf(type, work_buf); //type是指缓冲队列的类型，work_buf代表工作缓冲区的类型。
	Signal(MS(type));		 //发送互斥信号，对缓冲队列中的空间操作完成。
	Signal(RS(type));		 //给对应类型的缓冲区发信号，代表返回缓冲队列的空间
}

void get_buff(int type)
{
	Wait(RS(type)); //type是指缓冲队列的类型，RS是用来线程同步信号量，初始值是缓冲区的大小。
	Wait(MS(type)); //MS是用来互斥的信号量，保证缓冲队列的同一缓冲区只能被一个线程操作。
	//B(number)=take_buf(type);	//number是指缓冲队列对应的位置，这里是得到缓冲队列的缓冲区。得到之后可以用来读写数据，
	Signal(MS(type)); //发送互斥信号，对缓冲队列中的空间操作完成。
}

hin，sout，sin，hout工作缓冲区
1、收容输入：把设备输入的数据放在缓冲区中。
①首先从空缓队列取出一个缓冲区当作hin工作缓冲区，hin=Get_buf(emq)。把数据装入到hin中
②把得到的hin缓冲区放在inq缓冲队列。inq=Put_buf(inq,hin)。供给用户程序利用

2、提取输入：把缓冲区的数据交给用户程序处理。
①把inq缓冲队列中的数据提取到sin工作缓冲区中，sin=Get_buf(inq)。供给用户提取数据。
②提取完数据之后，把sin的工作缓冲区放回到emq空缓冲队列中。emq=Put_buf(emq,sin)。

3：收容输出：把用户程序处理完的数据放在缓冲区中。
①先用工作缓冲区hout向空缓冲队列emq申请缓冲区，得到用户处理的数据，hout=Get_buf(emq)。
②hout的数据读取完毕之后，放在outq缓冲区中。Put_buf(outq,hout)供给外设读取。

4：提取输出：
①先把要输出到设备的缓冲区中的数据放在sout工作缓冲区中。sout=Get_buf(outq)。
②提取完sout的数据之后，把sout缓冲区放到空缓冲队列而emq中。emq=Put_buf(emq,sout)

缓冲区中的数据提取完毕时，便调用 Releasebuf过程，将缓冲区释放。 releasebuf()

调入缓冲池(提前读)
调出缓冲池(延迟写)

LRU置换算法(置换时太久不用的调出)







缓冲区－延迟写

传统的unix实现在内核中设有缓冲区高速缓存或页面高速缓存，大多数磁盘I／O都通过缓冲进行，
当数据写入文件时，内核通常先将数据复制到其中一个缓冲区中，如果该缓冲区尚未写满，则并
不将其排入输出队列，而是等待其写满或者当内核需要重用该缓冲区一边存放其他磁盘块数据时，
再将该缓冲排入输出队列，然后待其到达对首时才进行实际的I／O操作。这种输出方式为延迟写。



